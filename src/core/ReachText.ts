import { Helpers } from '../helpers/Helpers';
import { SingletonBase } from '../helpers/SingletonBase';
import { ContextMenuInjector } from './ContextMenuInjector';
import { SyncedLyricsInjector } from './SyncedLyricsInjector';
import { TrackInfoInjector } from './TrackInfoInjector';
import { TrackLyrics } from './TrackLyrics';

/**
 * –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ–±—ä–µ–∫—Ç –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–æ–≥–∏–∫—É —Ä–∞–±–æ—Ç—ã –∞–¥–¥–æ–Ω–∞ ReachText.
 * –û–±—ä–µ–∫—Ç —è–≤–ª—è–µ—Ç—Å—è —Å–∏–Ω–≥–ª—Ç–æ–Ω–æ–º, —á—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞ ReachText.
 * @class
 * @extends {SingletonBase}
 */
export class ReachText extends SingletonBase {
    /**
     * –§–ª–∞–≥, –∫–æ—Ç–æ—Ä—ã–π —É–∫–∞–∑—ã–≤–∞–µ—Ç, –±—ã–ª –ª–∏ –≤—ã–∑–≤–∞–Ω –º–µ—Ç–æ–¥ main().
     * @type {boolean}
     * @default false
     * @public
     */
    public injected: boolean = false;

    /**
     * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—Å–∞ ReachText.
     * @inheritdoc
     * @public
     */
    public constructor() {
        super();
        this.main();
    }

    /**
     * @see {@link ContextMenuInjector}
     * @public
     * @type {ContextMenuInjector}
     */
    public contextMenuInjector: ContextMenuInjector = ContextMenuInjector.get();

    /**
     * @see {@link SyncedLyricsInjector}
     * @public
     * @type {SyncedLyricsInjector}
     */
    public syncedLyricsInjector: SyncedLyricsInjector = SyncedLyricsInjector.get();

    /**
     * @see {@link TrackInfoInjector}
     * @public
     * @type {TrackInfoInjector}
     */
    public trackInfoInjector: TrackInfoInjector = TrackInfoInjector.get();

    /**
     * –ú–µ—Ç–æ–¥ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∞–¥–¥–æ–Ω–∞. –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞ –∫–ª–∞—Å—Å–∞ ReachText.
     * @private
     */
    private main() {
        if (!this.injected) {
            this.injected = true;
            this.contextMenuInjector.inject();
            this.syncedLyricsInjector.inject();
            this.trackInfoInjector.inject();
        }
    }

    /**
     * –ü–æ—Å–ª–µ–¥–Ω–∏–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.
     * @public
     * @type {TrackLyrics | null}
     */
    public latestTrackLyrics: TrackLyrics | null = null;

    /**
     * –ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç–∞. –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç —É—Å–∫–æ—Ä–∏—Ç—å –ø–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–∞.
     * @public
     * @type {TrackLyrics[]}
     */
    private cachedTrackLyrics: TrackLyrics[] = [];

    /**
     * –¢–µ–∫—É—â–∞—è –ø–µ—Å–Ω—è, –∫–æ—Ç–æ—Ä–∞—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è.
     * @public
     * @type {string | null}
     */
    private _processingTrackTitle: string | null = null;

    /**
     * –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–µ—Å–Ω–∏.
     * @param {string} trackName - –ù–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏.
     * @param {string | null} artistName - –ò–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.
     * @param {number | null} trackDuration - –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—Å–Ω–∏. (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç)
     * @param {string | null} albumName - –ù–∞–∑–≤–∞–Ω–∏–µ –∞–ª—å–±–æ–º–∞. (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç)
     * @returns {Promise<TrackLyrics | null>} - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç TrackLyrics –∏–ª–∏ null, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.
     * @public
     */
    public async getTrackLyrics(trackName: string, artistName: string | null, trackDuration: number | null = null, albumName: string | null = null): Promise<TrackLyrics | null> {
        if (!trackName) {
            return null;
        }

        // –ü–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–∞ –ø–æ –∫—ç—à—É
        const cachedTrackLyrics = this.cachedTrackLyrics.find(
            track =>
                track.trackName === trackName &&
                track.artistName === artistName &&
                (albumName ? track.albumName === albumName : true)
        );

        // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞–π–¥–µ–Ω –≤ –∫–µ—à–µ, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
        if (cachedTrackLyrics) {
            this.latestTrackLyrics = cachedTrackLyrics;
            return cachedTrackLyrics;
        }

        if (this._processingTrackTitle === trackName) {
            while (this._processingTrackTitle === trackName) {
                await Helpers.delay(100);
            }
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ –∫–∞–∫–æ–π —Ç—Ä–µ–∫ —Å–µ–π—á–∞—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
        this._processingTrackTitle = trackName;

        // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –≤—Å–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∞, —Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä—è–º–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Å–Ω–∏. –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç —Å–∞–º—ã–º —Ç–æ—á–Ω—ã–º.
        // –û—Ç–∫–ª—é—á–µ–Ω–æ —Ç.–∫, –∫–∞–∫ –æ–∫–∞–∑–∞–ª–æ—Å—å, —ç—Ç–æ –Ω–∞–æ–±–æ—Ä–æ—Ç —É–º–µ–Ω—å—à–∞–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.ü´°
        if (false/*trackName && artistName && trackDuration && albumName*/) {
            var results = await fetch(
                `https://lrclib.net/api/get?artist_name=${encodeURIComponent(
                    artistName!
                )}&track_name=${encodeURIComponent(trackName)}&duration=${trackDuration}&album_name=${encodeURIComponent(albumName!)}`);

            // /api/get –≤–æ–∑—Ä–∞—â–∞–µ—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, —Ç–∞–∫ —á—Ç–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤ –æ—Ç–ª–∏—á–∏–∏ –æ—Ç /api/search –Ω–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞
            const json = await results.json();
            var result = json;
        }
        // –ï—Å–ª–∏ –∂–µ –Ω–µ —É–∫–∞–∑–∞–Ω—ã, —Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ç—Ä–µ–∫–∞ –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é.
        else {
            var results = await fetch(
                `https://lrclib.net/api/search?track_name=${encodeURIComponent(
                    trackName
                )}&artist_name=${encodeURIComponent(artistName!)}`);

            let json = await results.json();

            if (!json || !Array.isArray(json) || json.length === 0) {
                this._processingTrackTitle = null;  
                return null;
            }

            json = json.filter((result: any) => result.instrumental == false);
            var result = json[0];

            if (trackDuration && trackDuration > 0) {
                // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –¥–ª–∏–Ω–∞ —Ç—Ä–µ–∫–∞, —Ç–æ –∏—Å–∫–ª—é—á–µ–º –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ —Ç—Ä–µ–∫–∏, –¥–ª–∏–Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–π. –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                const resultsWithRequestedDuration = json.filter(
                    (result: any) => result.duration == trackDuration
                );

                if (resultsWithRequestedDuration.length > 0) {
                    // –í –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ —Ç–µ –ø–µ—Å–Ω–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, ...
                    const preResult = json.find(
                        (result: any) => result.syncedLyrics != null && result.syncedLyrics != undefined
                    );

                    // ... –µ—Å–ª–∏ —Ç–∞–∫–æ–≤—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Ç–æ –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–æ–π –¥–ª–∏–Ω–æ–π
                    if (!preResult) {
                        result = resultsWithRequestedDuration[0];
                    }
                    else {
                        result = preResult;
                    }
                }
            }
        }

        const lyrics = TrackLyrics.fromJson(result);

        if (this._processingTrackTitle === trackName) {
            this._processingTrackTitle = null;

            // –ò–∑–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Ç—Ä–µ–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—ç—à–∞
            lyrics.trackName = trackName;

            console.log('[ReachText] –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω: ', lyrics);
            this.cachedTrackLyrics.push(lyrics);
            this.latestTrackLyrics = lyrics;
        }

        this._processingTrackTitle = null;

        return lyrics;
    }
}